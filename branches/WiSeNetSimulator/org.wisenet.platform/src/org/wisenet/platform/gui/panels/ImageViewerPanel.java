/*
 *  Wireless Sensor Network Simulator
 *  The next generation for WSN Simulations
 */

/*
 * ImageViewerPanel.java
 *
 * Created on Oct 3, 2010, 5:07:22 PM
 */
package org.wisenet.platform.gui.panels;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import org.wisenet.platform.utils.others.ImageCanvas;
import java.awt.Toolkit;
import java.awt.Image;
import javax.swing.filechooser.FileFilter;
import org.wisenet.platform.common.ui.PlatformPanel;
import org.wisenet.platform.utils.GUI_Utils;
import org.wisenet.platform.utils.PlatformUtils;

/**
 *
 * @author Pedro Marques da Silva <MSc Student @di.fct.unl.pt>
 */
public class ImageViewerPanel extends PlatformPanel {

    boolean cancel = false;
    ImageCanvas imageCanvas = new ImageCanvas();

    /** Creates new form ImageViewerPanel */
    public ImageViewerPanel() {
        initComponents();
        jScrollPane1.add(imageCanvas);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtImageFile = new javax.swing.JTextField();
        cmdBrowse = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmdScaleValue = new javax.swing.JTextField();
        chkStrectch = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();

        setMaximumSize(new java.awt.Dimension(700, 2147483647));
        setMinimumSize(new java.awt.Dimension(700, 400));
        setPreferredSize(new java.awt.Dimension(700, 400));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(627, 90));
        jPanel1.setMinimumSize(new java.awt.Dimension(627, 90));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(627, 90));

        jLabel1.setText("Image file:");
        jLabel1.setName("jLabel1"); // NOI18N

        txtImageFile.setEditable(false);
        txtImageFile.setName("txtImageFile"); // NOI18N
        txtImageFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtImageFileMouseClicked(evt);
            }
        });

        cmdBrowse.setText("Browse...");
        cmdBrowse.setName("cmdBrowse"); // NOI18N
        cmdBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBrowseActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel2.setText("Image Scale:");
        jLabel2.setName("jLabel2"); // NOI18N

        cmdScaleValue.setName("cmdScaleValue"); // NOI18N

        chkStrectch.setText("Stretch Image");
        chkStrectch.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        chkStrectch.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkStrectch.setName("chkStrectch"); // NOI18N

        jLabel4.setText("1 /");
        jLabel4.setBorder(null);
        jLabel4.setName("jLabel4"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(cmdScaleValue, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 301, Short.MAX_VALUE)
                .addComponent(chkStrectch, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmdScaleValue, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(chkStrectch))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34)
                        .addComponent(txtImageFile, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(cmdBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImageFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(cmdBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setName("jScrollPane1"); // NOI18N
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBrowseActionPerformed
        try {
            FileFilter imageFileFilter = new FileFilter() {

                String[] extensions = new String[]{"png", "gif", "bmp", "jpg"};

                @Override
                public boolean accept(File file) {
                    if (file.isDirectory()) {
                        return true;
                    } else {
                        String path = file.getAbsolutePath().toLowerCase();
                        for (int i = 0, n = extensions.length; i < n; i++) {
                            String extension = extensions[i];
                            if (path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.') {
                                return true;
                            }
                        }
                    }
                    return false;
                }

                @Override
                public String getDescription() {
                    return "Image files";
                }
            };
            String file = GUI_Utils.showOpenDialog(new FileFilter[]{imageFileFilter}, "Open image file");
            if (file != null) {
                txtImageFile.setText(file);
                previewImage();
            }
        } catch (IOException ex) {
            PlatformUtils.log(ex);
            GUI_Utils.showException(ex);
        }

    }//GEN-LAST:event_cmdBrowseActionPerformed

    private void txtImageFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtImageFileMouseClicked
        cmdBrowseActionPerformed(null);
    }//GEN-LAST:event_txtImageFileMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkStrectch;
    private javax.swing.JButton cmdBrowse;
    private javax.swing.JTextField cmdScaleValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtImageFile;
    // End of variables declaration//GEN-END:variables

    private boolean previewImage() {
        if (txtImageFile.getText().length() > 0) {
            File f = new File(txtImageFile.getText());
            if (!f.exists()) {
                return true;
            }
            Image im = Toolkit.getDefaultToolkit().getImage(f.getAbsolutePath());
            imageCanvas.displayImage(im);
        }
        return false;
    }

    public void updateImage(Image im, boolean stretch) {
        imageCanvas.displayImage(im);
    }

    @Override
    public boolean onCancel() {
        cancel = true;
        return true;
    }

    @Override
    public boolean onOK() {
        cancel = false;
        return true;
    }

    @Override
    public boolean onApply() {
        return true;
    }

    @Override
    protected boolean isDataValid() {
        if (txtImageFile.getText().length() == 0) {
            if (new File(txtImageFile.getText()).exists()) {
                return true;
            }
        }
        return false;
    }

    public BufferedImage getImage() {
        if (cancel) {
            return null;
        }
        return imageCanvas.getImage();
    }

    public boolean strechImage() {
        return chkStrectch.isSelected();
    }

    @Override
    public void beforeClose() {
    }
}
