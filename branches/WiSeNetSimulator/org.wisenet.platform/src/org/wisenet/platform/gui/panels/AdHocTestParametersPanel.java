/*
 *     Wireless Sensor Network Simulator
 *   The next generation for WSN Simulations
 */

/*
 * AdHocTestParametersPanel.java
 *
 * Created on Jan 20, 2011, 12:40:22 AM
 */
package org.wisenet.platform.gui.panels;

import javax.swing.JFormattedTextField;
import javax.swing.JTextField;
import org.wisenet.platform.common.ui.PlatformPanel;
import org.wisenet.platform.utils.GUI_Utils;
import org.wisenet.platform.utils.PlatformUtils;
import org.wisenet.simulator.components.evaluation.tests.AbstractTest;
import org.wisenet.simulator.components.evaluation.tests.AdHocTest;
import org.wisenet.simulator.components.evaluation.tests.BaseTest;
import org.wisenet.simulator.components.evaluation.tests.TestInputParameters;
import org.wisenet.simulator.components.simulation.Simulation;

/**
 *
 * @author posilva
 */
public class AdHocTestParametersPanel extends PlatformPanel {

    int sources = 0;
    int receivers = 0;
    int attacked = 0;
    protected boolean addToSim;
    protected Simulation simulation = null;
    AbstractTest test;
    TestInputParameters inputParameters = new TestInputParameters();

    private int INT(JTextField text) throws NumberFormatException {
        return Integer.parseInt(text.getText());
    }

    /** Creates new form AdHocTestParametersPanel */
    public AdHocTestParametersPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        txtIntervalBetweenMessages = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        txtNrMessagesPerNode = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        txtNrRetransmissions = new javax.swing.JFormattedTextField();
        cboAttacks = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtNrAttackNodes = new javax.swing.JFormattedTextField();
        txtNrReceiverNodes = new javax.swing.JFormattedTextField();
        txtNrSenderNodes = new javax.swing.JFormattedTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setText("No. of messages sent:");
        jLabel7.setName("jLabel7"); // NOI18N
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 127, -1, -1));

        txtIntervalBetweenMessages.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtIntervalBetweenMessages.setText("10");
        txtIntervalBetweenMessages.setName("txtIntervalBetweenMessages"); // NOI18N
        txtIntervalBetweenMessages.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIntervalBetweenMessagesvalidateValuerOnFocusLost(evt);
            }
        });
        add(txtIntervalBetweenMessages, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 156, 119, -1));

        jLabel8.setText("No. of retransmissions:");
        jLabel8.setName("jLabel8"); // NOI18N
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 191, -1, -1));

        txtNrMessagesPerNode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNrMessagesPerNode.setText("1");
        txtNrMessagesPerNode.setName("txtNrMessagesPerNode"); // NOI18N
        txtNrMessagesPerNode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNrMessagesPerNodevalidateValuerOnFocusLost(evt);
            }
        });
        add(txtNrMessagesPerNode, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 122, 119, 23));

        jLabel9.setText("Interval between message:");
        jLabel9.setName("jLabel9"); // NOI18N
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 161, -1, -1));

        txtNrRetransmissions.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNrRetransmissions.setText("1");
        txtNrRetransmissions.setName("txtNrRetransmissions"); // NOI18N
        txtNrRetransmissions.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNrRetransmissionsvalidateValuerOnFocusLost(evt);
            }
        });
        add(txtNrRetransmissions, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 186, 119, -1));

        cboAttacks.setName("cboAttacks"); // NOI18N
        add(cboAttacks, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 222, 302, -1));

        jLabel10.setText("Selected Attack:");
        jLabel10.setName("jLabel10"); // NOI18N
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 222, 91, -1));

        jLabel3.setText("No. of sender nodes:");
        jLabel3.setName("jLabel3"); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 17, -1, -1));

        jLabel4.setText("No. of receiver nodes:");
        jLabel4.setName("jLabel4"); // NOI18N
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 48, -1, -1));

        jLabel11.setText("No. of attacked nodes:");
        jLabel11.setName("jLabel11"); // NOI18N
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 78, -1, -1));

        txtNrAttackNodes.setEditable(false);
        txtNrAttackNodes.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNrAttackNodes.setText("0");
        txtNrAttackNodes.setName("txtNrAttackNodes"); // NOI18N
        txtNrAttackNodes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNrAttackNodesvalidateValuerOnFocusLost(evt);
            }
        });
        add(txtNrAttackNodes, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 73, 120, -1));

        txtNrReceiverNodes.setEditable(false);
        txtNrReceiverNodes.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNrReceiverNodes.setText("0");
        txtNrReceiverNodes.setName("txtNrReceiverNodes"); // NOI18N
        txtNrReceiverNodes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNrReceiverNodesvalidateValuerOnFocusLost(evt);
            }
        });
        add(txtNrReceiverNodes, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 43, 120, -1));

        txtNrSenderNodes.setEditable(false);
        txtNrSenderNodes.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNrSenderNodes.setText("0");
        txtNrSenderNodes.setName("txtNrSenderNodes"); // NOI18N
        txtNrSenderNodes.setSelectionEnd(txtNrSenderNodes.getText().length());
        txtNrSenderNodes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNrSenderNodesvalidateValuerOnFocusLost(evt);
            }
        });
        add(txtNrSenderNodes, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 12, 120, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtIntervalBetweenMessagesvalidateValuerOnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIntervalBetweenMessagesvalidateValuerOnFocusLost
        JFormattedTextField source = (JFormattedTextField) evt.getSource();

        if (source.getName().equals("")) {
            setValueWhenEmpty(source, "0");
        }
    }//GEN-LAST:event_txtIntervalBetweenMessagesvalidateValuerOnFocusLost

    private void txtNrMessagesPerNodevalidateValuerOnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNrMessagesPerNodevalidateValuerOnFocusLost
        JFormattedTextField source = (JFormattedTextField) evt.getSource();

        if (source.getName().equals("")) {
            setValueWhenEmpty(source, "0");
        }
    }//GEN-LAST:event_txtNrMessagesPerNodevalidateValuerOnFocusLost

    private void txtNrRetransmissionsvalidateValuerOnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNrRetransmissionsvalidateValuerOnFocusLost
        JFormattedTextField source = (JFormattedTextField) evt.getSource();

        if (source.getName().equals("")) {
            setValueWhenEmpty(source, "0");
        }
    }//GEN-LAST:event_txtNrRetransmissionsvalidateValuerOnFocusLost

    private void txtNrAttackNodesvalidateValuerOnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNrAttackNodesvalidateValuerOnFocusLost
        JFormattedTextField source = (JFormattedTextField) evt.getSource();

        if (source.getName().equals("")) {
            setValueWhenEmpty(source, "0");
        }
    }//GEN-LAST:event_txtNrAttackNodesvalidateValuerOnFocusLost

    private void txtNrReceiverNodesvalidateValuerOnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNrReceiverNodesvalidateValuerOnFocusLost
        JFormattedTextField source = (JFormattedTextField) evt.getSource();

        if (source.getName().equals("")) {
            setValueWhenEmpty(source, "0");
        }
    }//GEN-LAST:event_txtNrReceiverNodesvalidateValuerOnFocusLost

    private void txtNrSenderNodesvalidateValuerOnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNrSenderNodesvalidateValuerOnFocusLost
        JFormattedTextField source = (JFormattedTextField) evt.getSource();

        if (source.getName().equals("")) {
            setValueWhenEmpty(source, "0");
        }
    }//GEN-LAST:event_txtNrSenderNodesvalidateValuerOnFocusLost

    @Override
    public boolean onCancel() {
        return true;
    }

    @Override
    public boolean onOK() {
        if (isDataValid()) {
            updateTest();
            result = test;
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean onApply() {
        return true;
    }

    @Override
    public void beforeStart() {
        super.beforeStart();
        if (simulation == null) {
            GUI_Utils.showWarningMessage("No existing simulation!\n Close Window!");
            return;
        }
        PlatformUtils.loadSimulationAttacksIntoCombo(cboAttacks);
        int nodes[] = simulation.countAdHocTestNodes();
        if (nodes != null) {
            sources = nodes[0];
            receivers = nodes[1];
            attacked = nodes[2];
        }
        txtNrAttackNodes.setText("" + attacked);
        txtNrReceiverNodes.setText("" + receivers);
        txtNrSenderNodes.setText("" + sources);

    }

    @Override
    protected boolean isDataValid() {
        if (simulation == null) {
            GUI_Utils.showWarningMessage("No existing simulation!");
            return false;
        }
        if (textBoxIsEmpty(txtNrMessagesPerNode, "Nr of messages is required")) {
            return false;
        }
        if (textBoxIsEmpty(txtIntervalBetweenMessages, "Interval is required")) {
            return false;
        }
        if (textBoxIsEmpty(txtNrRetransmissions, "Nr. of retransmissions is required")) {
            return false;
        }


        return true;
    }

    private boolean textBoxIsEmpty(JTextField textField, String msg) {
        boolean ret = textField.getText().trim().length() == 0;
        if (ret) {
            GUI_Utils.showWarningMessage(msg);
            GUI_Utils.setFocus(textField);
        } else {
            return false;
        }

        return true;
    }

    private void setValueWhenEmpty(JFormattedTextField text, String defaultValue) {
        if (text.getText().length() == 0) {
            text.setText(defaultValue);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboAttacks;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JFormattedTextField txtIntervalBetweenMessages;
    private javax.swing.JFormattedTextField txtNrAttackNodes;
    private javax.swing.JFormattedTextField txtNrMessagesPerNode;
    private javax.swing.JFormattedTextField txtNrReceiverNodes;
    private javax.swing.JFormattedTextField txtNrRetransmissions;
    private javax.swing.JFormattedTextField txtNrSenderNodes;
    // End of variables declaration//GEN-END:variables

    protected void updateTest() {
        inputParameters.setNumberOfSenderNodes(sources);
        inputParameters.setNumberOfReceiverNodes(receivers);
        inputParameters.setNumberOfAttackNodes(attacked);
        inputParameters.setPercentOfSenderNodes(false);
        inputParameters.setPercentOfReceiverNodes(false);
        inputParameters.setPercentOfAttackNodes(false);
        inputParameters.setOnlyConsiderToSenderStableNodes(false);
        inputParameters.setOnlyConsiderToAttackStableNodes(false);
        inputParameters.setOnlyConsiderToReceiverSinkNodes(false);
        inputParameters.setPercentOfSenderNodes(false);
        //
        inputParameters.setNumberOfMessagesPerNode(INT(txtNrMessagesPerNode));
        inputParameters.setIntervalBetweenMessagesSent(INT(txtIntervalBetweenMessages));
        inputParameters.setNumberOfRetransmissions(INT(txtNrRetransmissions));

        if (cboAttacks.getItemCount() > 0) {

            if (cboAttacks.getSelectedItem().equals("None")) {
                inputParameters.setAttackSelected(null);
            } else {
                inputParameters.setAttackSelected(cboAttacks.getSelectedItem().toString());
            }
        }
        test = new AdHocTest(inputParameters);
        test.setName("AdHoc Test");
        test.setDescription("AdHoc Test Description");
        test.setDebugEnabled(false);
        test.setBatchMode(false);
        test.setTimesToRun(1);
    }

    @Override
    public void beforeClose() {
    }

    public void setCurrentTest(AbstractTest currentTest) {
        test = currentTest;
    }

    public void setSimulation(Simulation simulation) {
        this.simulation = simulation;
    }
}
