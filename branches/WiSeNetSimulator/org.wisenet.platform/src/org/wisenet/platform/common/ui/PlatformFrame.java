/*
 **  Wireless Sensor Network Simulator
 *  The next generation for WSN Simulations
 */

/*
 * PlatformDialog.java
 *
 * Created on Sep 4, 2010, 2:50:29 AM
 */
package org.wisenet.platform.common.ui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JPanel;
import org.wisenet.platform.utils.GUI_Utils;

/**
 *
 * @author Pedro Marques da Silva <MSc Student @di.fct.unl.pt>
 */
public class PlatformFrame extends javax.swing.JFrame implements KeyListener, ContainerListener, IPlatformDialogActions {

    public static final int NOACTIONS_MODE = -1;
    public static final int OKCANCEL_MODE = 0;
    public static final int OKCANCELAPPLY_MODE = 1;
    public static final int OK_MODE = 2;
    public static final int CANCEL_STATUS = 0;
    public static final int OK_STATUS = 1;
    private boolean displayed;
    protected int status;
    protected int mode = NOACTIONS_MODE;
    protected boolean applyVisible = false;
    private PlatformPanel platformPanel;

    /** 
     * Creates new form PlatformDialog
     */
    public PlatformFrame() {
        super();
        initComponents();
        initDialog();
        setMode();
    }

    /**
     * 
     */
    public PlatformFrame(String title) {
        super(title);
        initComponents();
        initDialog();
        setMode();
    }

    public PlatformFrame(PlatformPanel content, String titlearea) {
        super();
        initComponents();
        initDialog();
        assignContent(content);
        this.titleArea.setText(titlearea);
        setMode();
    }

    public PlatformFrame(PlatformPanel content) {
        super();
        initComponents();
        initDialog();
        assignContent(content);
        setMode();

    }

    public PlatformFrame(PlatformPanel content, String titlearea, int mode) {
        super();
        initComponents();
        initDialog();
        assignContent(content);
        this.titleArea.setText(titlearea);
        this.mode = mode;
        setMode();
    }

    private void configureButtons(int numBtn) {
        GridLayout btnLayout = (GridLayout) pnlButtons.getLayout();
        int w = (pnlButtons.getWidth() - 2 * btnLayout.getHgap()) / 3;
        int h = pnlButtons.getHeight();
        pnlButtons.setPreferredSize(new Dimension(w, h));
        pnlButtons.setMaximumSize(new Dimension(w, h));
        pnlButtons.setMinimumSize(new Dimension(w, h));
        btnLayout.setColumns(numBtn);



        repaint();

    }

    private void initDialog() {
        getRootPane().setDefaultButton(cmdOk);
        addKeyAndContainerListenerRecursively(this);
        addKeyListener(this);
    }

    public JPanel getContentArea() {
        return contentArea;
    }

    public void setContentArea(PlatformPanel contentArea) {
        this.contentArea.removeAll();
        this.contentArea.add(contentArea, BorderLayout.CENTER);
    }

    public boolean isDisplayed() {
        return displayed;
    }

    public void setDisplayed(boolean displayed) {
        this.displayed = displayed;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleArea = new javax.swing.JLabel();
        buttonArea = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        cmdOk = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdApply = new javax.swing.JButton();
        contentArea = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        titleArea.setBackground(new java.awt.Color(254, 254, 254));
        titleArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titleArea.setMaximumSize(new java.awt.Dimension(200, 30));
        titleArea.setMinimumSize(new java.awt.Dimension(200, 30));
        titleArea.setName("titleArea"); // NOI18N
        titleArea.setOpaque(true);
        titleArea.setPreferredSize(new java.awt.Dimension(200, 40));
        getContentPane().add(titleArea, java.awt.BorderLayout.PAGE_START);

        buttonArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonArea.setMaximumSize(new java.awt.Dimension(32767, 50));
        buttonArea.setMinimumSize(new java.awt.Dimension(200, 94));
        buttonArea.setName("buttonArea"); // NOI18N
        buttonArea.setPreferredSize(new java.awt.Dimension(100, 50));

        pnlButtons.setBorder(null);
        pnlButtons.setMaximumSize(new java.awt.Dimension(200, 26));
        pnlButtons.setMinimumSize(new java.awt.Dimension(200, 26));
        pnlButtons.setName("pnlButtons"); // NOI18N
        pnlButtons.setPreferredSize(new java.awt.Dimension(200, 26));
        pnlButtons.setLayout(new java.awt.GridLayout(1, 3, 5, 0));

        cmdOk.setText("OK"); // NOI18N
        cmdOk.setName("cmdOk"); // NOI18N
        cmdOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOkActionPerformed(evt);
            }
        });
        pnlButtons.add(cmdOk);

        cmdCancel.setText("Cancel"); // NOI18N
        cmdCancel.setName("cmdCancel"); // NOI18N
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        pnlButtons.add(cmdCancel);

        cmdApply.setText("Apply"); // NOI18N
        cmdApply.setName("cmdApply"); // NOI18N
        pnlButtons.add(cmdApply);

        javax.swing.GroupLayout buttonAreaLayout = new javax.swing.GroupLayout(buttonArea);
        buttonArea.setLayout(buttonAreaLayout);
        buttonAreaLayout.setHorizontalGroup(
            buttonAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonAreaLayout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        buttonAreaLayout.setVerticalGroup(
            buttonAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(buttonArea, java.awt.BorderLayout.PAGE_END);

        contentArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        contentArea.setName("contentArea"); // NOI18N
        contentArea.setLayout(new java.awt.BorderLayout());
        getContentPane().add(contentArea, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        performCancelAction(null);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOkActionPerformed
        performEnterAction(null);
    }//GEN-LAST:event_cmdOkActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (platformPanel != null) {
            platformPanel.beforeClose();
        }
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonArea;
    private javax.swing.JButton cmdApply;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOk;
    private javax.swing.JPanel contentArea;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JLabel titleArea;
    // End of variables declaration//GEN-END:variables

    public void setTitleAreaText(String title) {
        titleArea.setText(title);
    }

    public void display() {
        if (isDisplayed()) {
            return;
        }
        setDisplayed(true);
        status = CANCEL_STATUS;
        if (getContentArea().getComponentCount() == 0) {
            return;
        }
        pack();
        GUI_Utils.centerOnScreen(this);
        setVisible(true);
        if (platformPanel != null) {
            platformPanel.beforeStart();
        }

        this.contentArea.updateUI();
    }

    public int getStatus() {
        return status;
    }

    private void addKeyAndContainerListenerRecursively(Component c) {
        c.removeKeyListener(this);
        c.addKeyListener(this);

        if (c instanceof Container) {

            Container cont = (Container) c;

            cont.removeContainerListener(this);
            cont.addContainerListener(this);

            Component[] children = cont.getComponents();

            for (int i = 0; i < children.length; i++) {
                addKeyAndContainerListenerRecursively(children[i]);
            }
        }
    }

    private void removeKeyAndContainerListenerRecursively(Component c) {
        c.removeKeyListener(this);

        if (c instanceof Container) {

            Container cont = (Container) c;

            cont.removeContainerListener(this);

            Component[] children = cont.getComponents();

            for (int i = 0; i < children.length; i++) {
                removeKeyAndContainerListenerRecursively(children[i]);
            }
        }
    }

    public void componentAdded(ContainerEvent e) {
        addKeyAndContainerListenerRecursively(e.getChild());
    }

    public void componentRemoved(ContainerEvent e) {
        removeKeyAndContainerListenerRecursively(e.getChild());
    }

    public void keyPressed(KeyEvent e) {
        int code = e.getKeyCode();
        if (code == KeyEvent.VK_ESCAPE) {
            status = CANCEL_STATUS;
            performCancelAction(e);
        }
    }

    public void keyReleased(KeyEvent e) {
    }

    public void keyTyped(KeyEvent e) {
    }

    void performCancelAction(KeyEvent e) {

        status = CANCEL_STATUS;
        PlatformPanel p = (PlatformPanel) getContentArea().getComponent(0);

        if (mode == OK_MODE) {
            dispose();
        } else if (p.onCancel()) {
            dispose();
        }
    }

    void performEnterAction(KeyEvent e) {
        status = OK_STATUS;
        PlatformPanel p = (PlatformPanel) getContentArea().getComponent(0);
        if (p.onOK()) {
            dispose();
        } else {
            System.out.println("NAO PODE FECHAR");
        }
    }

    void performApplyAction(KeyEvent e) {
        PlatformPanel p = (PlatformPanel) getContentArea().getComponent(0);
        if (p.onApply()) {
            cmdApply.setEnabled(false);
        }
    }

    private void setMode() {
        if (mode == OKCANCEL_MODE) {
            setOKCancelMode();
        } else if (mode == OKCANCELAPPLY_MODE) {
            setOKCancelApplyMode();
        } else if (mode == OK_MODE) {
            setOKMode();
        } else if (mode == NOACTIONS_MODE) {
            setNoActions();
        }
    }

    private void setOKMode() {
        cmdApply.setVisible(false);
        cmdCancel.setVisible(false);
        pnlButtons.add(cmdOk);

        configureButtons(1);
    }

    private void setOKCancelApplyMode() {
        configureButtons(3);
        getRootPane().setDefaultButton(cmdApply);
        cmdApply.setEnabled(false);
    }

    private void setOKCancelMode() {
        cmdApply.setVisible(false);
        pnlButtons.add(cmdOk);
        pnlButtons.add(cmdCancel);
        configureButtons(2);
    }

    public void display(PlatformPanel c) {
        setContentArea(c);
        display();
    }

    public void changesOccurred() {
        if (mode == OKCANCELAPPLY_MODE) {
            cmdApply.setEnabled(true);
        }
    }

    private void assignContent(PlatformPanel content) {
        this.platformPanel = content;
        setContentArea(content);
        content.setNotificationHandler(this);
    }

    public static PlatformFrame display(PlatformPanel content, String titlearea, int mode) {
        PlatformFrame pf = new PlatformFrame(content, titlearea, mode);
        pf.display();
        return pf;
    }

    private void setNoActions() {
        this.remove(buttonArea);
    }
}
