/*
 *     Wireless Sensor Network Simulator
 *   The next generation for WSN Simulations
 */

/*
 * MACLayerStatChart.java
 *
 * Created on Jan 12, 2011, 10:08:07 PM
 */
package org.wisenet.platform.test;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.wisenet.simulator.utilities.stats.StatisticMACLayerListener;
import org.wisenet.simulator.utilities.stats.StatisticsManager;

/**
 *
 * @author posilva
 */
public class MACLayerStatChart extends javax.swing.JFrame implements StatisticMACLayerListener {

    private static MACLayerStatChart instance;

    public static MACLayerStatChart getInstance() {
        if (instance == null) {
            instance = new MACLayerStatChart();
        }
        return instance;
    }
    private Point point = new Point();
    private XYDataset dataset;
    private JFreeChart chart;
    private ChartPanel chartPanel;
    private XYSeries corruptedMessagesSerie;
    private XYSeries notSentMessagesSerie;
    private XYSeries notReceivedMessagesSerie;
    private double step = 1;

    /** Creates new form MACLayerStatChart */
    public MACLayerStatChart() {
        initComponents();
        setSize(new Dimension(300, 300));
        addMouseListener(new MouseAdapter() {

            public void mousePressed(MouseEvent e) {
                point.x = e.getX();
                point.y = e.getY();
            }
        });
        addMouseMotionListener(new MouseMotionAdapter() {

            public void mouseDragged(MouseEvent e) {
                Point p = getLocation();
                setLocation(p.x + e.getX() - point.x, p.y + e.getY() - point.y);
            }
        });

        setupChart();


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startStopButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        startStopButton.setText("Start/Stop");
        startStopButton.setName("startStopButton"); // NOI18N
        startStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopButtonActionPerformed(evt);
            }
        });
        getContentPane().add(startStopButton, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        StatisticsManager.getInstance().addStatisticMacListener(this);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        StatisticsManager.getInstance().removeStatisticMacListener(this);
    }//GEN-LAST:event_formWindowClosed

    private void startStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopButtonActionPerformed
        if (startStopButton.isSelected()) {
            StatisticsManager.getInstance().startMACStatisticsProbe(1000);

        } else {
            StatisticsManager.getInstance().stopMACStatisticsProbe();
        }
    }//GEN-LAST:event_startStopButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MACLayerStatChart().setVisible(true);
            }
        });
    }

    private void setupChart() {

        dataset = createDataset();
        chart = createChart(dataset);
        chartPanel = new ChartPanel(chart);
        add(chartPanel, BorderLayout.CENTER);
        chartPanel.updateUI();
    }

    private XYDataset createDataset() {

        corruptedMessagesSerie = new XYSeries("Corrupted Messages Rate");

        notSentMessagesSerie = new XYSeries("Not Sent Messages Rate");
        notReceivedMessagesSerie = new XYSeries("Reception Droped Messages Rate");

        final XYSeriesCollection _dataset = new XYSeriesCollection();
        _dataset.addSeries(corruptedMessagesSerie);
        _dataset.addSeries(notSentMessagesSerie);
        _dataset.addSeries(notReceivedMessagesSerie);
        return _dataset;


    }

    private JFreeChart createChart(XYDataset dataset) {
        // create the chart...
        final JFreeChart chartX = ChartFactory.createXYLineChart(
                "MAC Layer Stats Chart", // chart title
                "Time", // x axis label
                "Percentage(%)", // y axis label
                dataset, // data
                PlotOrientation.VERTICAL,
                true, // include legend
                true, // tooltips
                false // urls
                );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chartX.setBackgroundPaint(Color.white);

//        final StandardLegend legend = (StandardLegend) chart.getLegend();
        //      legend.setDisplaySeriesShapes(true);

        // get a reference to the plot for further customisation...
        final XYPlot plot = chartX.getXYPlot();
        plot.setBackgroundPaint(Color.lightGray);
        //    plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, false);
        renderer.setSeriesShapesVisible(1, false);
        renderer.setSeriesShapesVisible(2, false);
        plot.setRenderer(renderer);

        // change the auto tick unit selection to integer units only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        // OPTIONAL CUSTOMISATION COMPLETED.

        return chartX;
    }

    private void updateCorruptedMessagesSerie(double x, double y) {
        corruptedMessagesSerie.add(x, y);
    }

    private void updateNotSentMessagesSerie(double x, double y) {
        notSentMessagesSerie.add(x, y);
    }

    @Override
    public void updateStats(double corruptedRate, double lostMessagesRate, double notReceived) {
        updateCorruptedMessagesSerie(step, corruptedRate);
        updateNotSentMessagesSerie(step, lostMessagesRate);
        updateNotReceivedMessagesSerie(step, notReceived);
        step++;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton startStopButton;
    // End of variables declaration//GEN-END:variables

    private void updateNotReceivedMessagesSerie(double x, double y) {
        notReceivedMessagesSerie.add(x, y);

    }
}
