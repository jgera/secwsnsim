/*
 ***  Wireless Sensor Network Simulator
 * The next generation for WSN Simulations
 */

/*
 * EnergyEvaluationPanel.java
 *
 * Created on 15/Jul/2010, 2:43:17
 */
package org.wisenet.platform.gui.panels;

import java.awt.BorderLayout;
import java.util.Hashtable;
import org.jdesktop.application.Action;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.wisenet.platform.common.ui.PlatformPanel;
import org.wisenet.platform.core.PlatformManager;
import org.wisenet.simulator.core.energy.EnergyController;
import org.wisenet.simulator.utilities.Utilities;

/**
 *
 * @author Pedro Marques da Silva <MSc Student @di.fct.unl.pt>
 */
public class EnergyEvaluationPanel extends PlatformPanel {

    final Object refreshMonitor = new Object();
    private boolean end = false;

    /** Creates new form EnergyEvaluationPanel */
    public EnergyEvaluationPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleArea = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        panelEnergyByState = new javax.swing.JPanel();
        panelEnergyByEvent = new javax.swing.JPanel();
        panelEnergyByState1 = new javax.swing.JPanel();
        panelEnergyByState2 = new javax.swing.JPanel();
        buttonsBar = new javax.swing.JPanel();
        tgbAutorefresh = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.wisenet.platform.PlatformApp.class).getContext().getResourceMap(EnergyEvaluationPanel.class);
        titleArea.setBackground(resourceMap.getColor("titleArea.background")); // NOI18N
        titleArea.setFont(resourceMap.getFont("titleArea.font")); // NOI18N
        titleArea.setText(resourceMap.getString("titleArea.text")); // NOI18N
        titleArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titleArea.setMaximumSize(new java.awt.Dimension(200, 30));
        titleArea.setMinimumSize(new java.awt.Dimension(200, 30));
        titleArea.setName("titleArea"); // NOI18N
        titleArea.setOpaque(true);
        titleArea.setPreferredSize(new java.awt.Dimension(200, 40));
        add(titleArea, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridLayout(2, 2));

        panelEnergyByState.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelEnergyByState.setName("panelEnergyByState"); // NOI18N
        panelEnergyByState.setLayout(new java.awt.BorderLayout());
        jPanel1.add(panelEnergyByState);

        panelEnergyByEvent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelEnergyByEvent.setName("panelEnergyByEvent"); // NOI18N
        panelEnergyByEvent.setLayout(new java.awt.BorderLayout());
        jPanel1.add(panelEnergyByEvent);

        panelEnergyByState1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelEnergyByState1.setName("panelEnergyByState1"); // NOI18N
        panelEnergyByState1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(panelEnergyByState1);

        panelEnergyByState2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelEnergyByState2.setName("panelEnergyByState2"); // NOI18N
        panelEnergyByState2.setLayout(new java.awt.BorderLayout());
        jPanel1.add(panelEnergyByState2);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        buttonsBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonsBar.setName("buttonsBar"); // NOI18N
        buttonsBar.setPreferredSize(new java.awt.Dimension(904, 40));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.wisenet.platform.PlatformApp.class).getContext().getActionMap(EnergyEvaluationPanel.class, this);
        tgbAutorefresh.setAction(actionMap.get("AutoRefreshAction")); // NOI18N
        tgbAutorefresh.setText(resourceMap.getString("tgbAutorefresh.text")); // NOI18N
        tgbAutorefresh.setName("tgbAutorefresh"); // NOI18N

        jButton1.setAction(actionMap.get("ShowCharts")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        javax.swing.GroupLayout buttonsBarLayout = new javax.swing.GroupLayout(buttonsBar);
        buttonsBar.setLayout(buttonsBarLayout);
        buttonsBarLayout.setHorizontalGroup(
            buttonsBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tgbAutorefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(790, Short.MAX_VALUE))
        );
        buttonsBarLayout.setVerticalGroup(
            buttonsBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsBarLayout.createSequentialGroup()
                .addGroup(buttonsBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tgbAutorefresh))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(buttonsBar, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsBar;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelEnergyByEvent;
    private javax.swing.JPanel panelEnergyByState;
    private javax.swing.JPanel panelEnergyByState1;
    private javax.swing.JPanel panelEnergyByState2;
    private javax.swing.JToggleButton tgbAutorefresh;
    private javax.swing.JLabel titleArea;
    // End of variables declaration//GEN-END:variables

    void createEnergyByStateChart() {
        JFreeChart chart = createChart(0);
        ChartPanel panel = new ChartPanel(chart);
        panel.updateUI();
        panelEnergyByState.add(panel, BorderLayout.CENTER);
        panelEnergyByState.updateUI();
    }

    private JFreeChart createChart(int type) {
        switch (type) {
            case 0:
                return ChartFactory.createPieChart("Energy by Routing Phases", (PieDataset) createInitialDataset(type), true, true, true);
            case 1:
                return ChartFactory.createPieChart("Energy by Events", (PieDataset) createInitialDataset(type), true, true, true);
        }
        return null;
    }

    Dataset createInitialDataset(int type) {
        DefaultPieDataset dataset = new DefaultPieDataset();
        switch (type) {
            case 0:
                Hashtable<String, Double> stateEnergyEntries = getEnergyInstrument().getDatabase().getStatesEnergy();
                for (String state : stateEnergyEntries.keySet()) {
                    dataset.setValue(state, stateEnergyEntries.get(state));
                }
                return dataset;
            case 1:
                Hashtable<String, Double> energyEntries = getEnergyInstrument().getDatabase().getEventsEnergy();
                for (String state : energyEntries.keySet()) {
                    dataset.setValue(state, energyEntries.get(state));
                }
                return dataset;
        }
        return dataset;
    }

    @Action
    public void ShowCharts() {
        createEnergyByStateChart();
        createEnergyByEventsChart();
    }

    private void createEnergyByEventsChart() {
        JFreeChart chart = createChart(1);
        ChartPanel panel = new ChartPanel(chart);
        panel.updateUI();
        panelEnergyByEvent.add(panel, BorderLayout.CENTER);
        panelEnergyByEvent.updateUI();
    }

    private EnergyController getEnergyInstrument() {
        try {
            return PlatformManager.getInstance().getActiveSimulation().getEnergyController();
        } catch (Exception e) {
            Utilities.handleException(e);
        }
        return null;

    }

    @Override
    public boolean onCancel() {
        return true;
    }

    @Override
    public boolean onOK() {
        return true;
    }

    @Override
    public boolean onApply() {
        return true;
    }

    @Override
    protected boolean isDataValid() {
        return true;
    }

    @Override
    public void beforeClose() {
    }
}
