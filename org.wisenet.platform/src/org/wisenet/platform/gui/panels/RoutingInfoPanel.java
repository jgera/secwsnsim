/*
 *  Wireless Sensor Network Simulator
 * The next generation for WSN Simulations
 */
package org.wisenet.platform.gui.panels;

import java.util.Collection;
import org.jdesktop.application.Action;
import org.wisenet.platform.common.ui.PlatformPanel;
import org.wisenet.platform.core.PlatformManager;
import org.wisenet.simulator.core.node.layers.routing.RoutingLayerController;
import org.wisenet.simulator.core.node.Node;

/**
 *
 * @author Pedro Marques da Silva <MSc Student @di.fct.unl.pt>
 */
public class RoutingInfoPanel extends PlatformPanel {

    static boolean hasInstance = false;
    private static RoutingInfoPanel instance;

    public static RoutingInfoPanel getInstance() {
        if (instance == null) {
            instance = new RoutingInfoPanel();
        }
        return instance;
    }

    /** Creates new form RoutingInfoPanel */
    public RoutingInfoPanel() {
        if (hasInstance) {
            throw new IllegalStateException("Only one instance of RoutingInfoPanel can exist");
        }


        initComponents();
        refresh();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtNrStableNodes = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNrMessagesSent = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtNrMessagesReceived = new javax.swing.JTextField();
        lblMessage = new javax.swing.JLabel();
        cmdRefresh = new javax.swing.JButton();
        txtNrNeighborsPerNode = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jPanel1.setName("jPanel1"); // NOI18N

        txtNrStableNodes.setEditable(false);
        txtNrStableNodes.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(RoutingInfoPanel.class);
        txtNrStableNodes.setText(resourceMap.getString("txtNrStableNodes.text")); // NOI18N
        txtNrStableNodes.setName("txtNrStableNodes"); // NOI18N
        txtNrStableNodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNrStableNodesActionPerformed(evt);
            }
        });

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setLabelFor(txtNrStableNodes);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setLabelFor(txtNrStableNodes);
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        txtNrMessagesSent.setEditable(false);
        txtNrMessagesSent.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNrMessagesSent.setText(resourceMap.getString("txtNrMessagesSent.text")); // NOI18N
        txtNrMessagesSent.setName("txtNrMessagesSent"); // NOI18N
        txtNrMessagesSent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNrMessagesSentActionPerformed(evt);
            }
        });

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setLabelFor(txtNrStableNodes);
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        txtNrMessagesReceived.setEditable(false);
        txtNrMessagesReceived.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNrMessagesReceived.setText(resourceMap.getString("txtNrMessagesReceived.text")); // NOI18N
        txtNrMessagesReceived.setName("txtNrMessagesReceived"); // NOI18N
        txtNrMessagesReceived.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNrMessagesReceivedActionPerformed(evt);
            }
        });

        lblMessage.setFont(resourceMap.getFont("lblMessage.font")); // NOI18N
        lblMessage.setForeground(resourceMap.getColor("lblMessage.foreground")); // NOI18N
        lblMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMessage.setText(resourceMap.getString("lblMessage.text")); // NOI18N
        lblMessage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblMessage.setName("lblMessage"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(RoutingInfoPanel.class, this);
        cmdRefresh.setAction(actionMap.get("Refresh")); // NOI18N
        cmdRefresh.setText(resourceMap.getString("cmdRefresh.text")); // NOI18N
        cmdRefresh.setName("cmdRefresh"); // NOI18N

        txtNrNeighborsPerNode.setEditable(false);
        txtNrNeighborsPerNode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNrNeighborsPerNode.setName("txtNrNeighborsPerNode"); // NOI18N
        txtNrNeighborsPerNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNrNeighborsPerNodeActionPerformed(evt);
            }
        });

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setLabelFor(txtNrStableNodes);
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmdRefresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(txtNrNeighborsPerNode, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(txtNrMessagesReceived, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(txtNrMessagesSent, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(txtNrStableNodes, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNrStableNodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNrMessagesSent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtNrMessagesReceived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtNrNeighborsPerNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdRefresh)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     */
    private void refresh() {
        if (!PlatformManager.getInstance().haveActiveSimulation()) {
            return;
        }

        RoutingLayerController routingLayerController = PlatformManager.getInstance().getActiveSimulation().getRoutingLayerController();

        if (routingLayerController == null) {
            lblMessage.setText("Invalid Routing Controller");
            txtNrStableNodes.setText("0");
            txtNrMessagesSent.setText("0");
            txtNrMessagesReceived.setText("0");
        } else {
            lblMessage.setText("");
            txtNrStableNodes.setText("" + routingLayerController.getTotalStableNodes());
            txtNrMessagesSent.setText("" + routingLayerController.getTotalSentMessages());
            txtNrMessagesReceived.setText("" + routingLayerController.getTotalReceivedMessages());
        }
        txtNrNeighborsPerNode.setText("" + PlatformManager.getInstance().getActiveSimulation().getAverageNeighborsPerNode());
    }

    private void txtNrStableNodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNrStableNodesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNrStableNodesActionPerformed

    private void txtNrMessagesSentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNrMessagesSentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNrMessagesSentActionPerformed

    private void txtNrMessagesReceivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNrMessagesReceivedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNrMessagesReceivedActionPerformed

    private void txtNrNeighborsPerNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNrNeighborsPerNodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNrNeighborsPerNodeActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdRefresh;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JTextField txtNrMessagesReceived;
    private javax.swing.JTextField txtNrMessagesSent;
    private javax.swing.JTextField txtNrNeighborsPerNode;
    private javax.swing.JTextField txtNrStableNodes;
    // End of variables declaration//GEN-END:variables

    @Action
    public void Refresh() {
        refresh();
    }

    @Action
    public void MarkStableNodes() {
        if (!PlatformManager.getInstance().haveActiveSimulation()) {
            return;
        }
        Collection<Node> nodes = PlatformManager.getInstance().getActiveSimulation().getSimulator().getNodes();
        for (Node node : nodes) {
            if (node.getRoutingLayer().isStable()) {
                if (!node.getGraphicNode().isMarked()) {
                    node.getGraphicNode().mark();
                } else {
                    node.getGraphicNode().unmark();
                }
            }
        }
    }

    @Override
    public boolean onCancel() {
        return true;
    }

    @Override
    public boolean onOK() {
        return true;
    }

    @Override
    public boolean onApply() {
        return true;
    }

    @Override
    protected boolean isDataValid() {
        return true;
    }

    @Override
    public void beforeClose() {
    }
}
