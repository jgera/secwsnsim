/*
 *     Wireless Sensor Network Simulator
 *   The next generation for WSN Simulations
 */

/*
 * ByEventsEnergyChart.java
 *
 * Created on Oct 15, 2010, 12:11:47 AM
 */
package org.wisenet.platform.core.charts.model;

import java.awt.BorderLayout;
import java.awt.Font;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.wisenet.simulator.core.energy.GlobalEnergyDatabase;

/**
 *
 * @author posilva
 */
public class ByEventsEnergyChart extends javax.swing.JPanel {

    protected Object database;
    protected Dataset dataset;
    private JFreeChart chart;
    String chartTitle = "By Events Energy";

    /** Creates new form ByEventsEnergyChart */
    public ByEventsEnergyChart() {
        initComponents();
    }

    public Object getDatabase() {
        return (Object) database;
    }

    public void setDatabase(GlobalEnergyDatabase database) {
        this.database = database;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        container.setName("container"); // NOI18N
        container.setLayout(new java.awt.BorderLayout());
        add(container, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel container;
    // End of variables declaration//GEN-END:variables
    /**
     * Creates a sample dataset.
     *
     * @return A sample dataset.
     */
    private Dataset createDataset() {
        if (getDatabase() == null) {
            return null;
        }
        DefaultPieDataset ds = new DefaultPieDataset();
        return updateData(ds);
    }

    private Dataset updateData(DefaultPieDataset ds) {
//        for (String event : getDatabase().getEventsEnergy().keySet()) {
////            ds.setValue(event, (Double) getDatabase().getEventsEnergy().get(event));
//            ds.setValue(event, (Double) getDatabase().getEventsEnergy().get(event));
//        }

        ds.setValue("One", new Double(43.2));
        ds.setValue("Two", new Double(10.0));
        ds.setValue("Three", new Double(27.5));
        ds.setValue("Four", new Double(17.5));
        ds.setValue("Five", new Double(11.0));
        ds.setValue("Six", new Double(19.4));
        return ds;
    }

    private JFreeChart createChart(Dataset dataset) {
        if (dataset == null) {
            return null;
        }

        JFreeChart ch = ChartFactory.createPieChart(
                chartTitle, (PieDataset) dataset, // data
                true, // include legend
                true,
                false);

        PiePlot plot = (PiePlot) ch.getPlot();
        plot.setLabelFont(new Font("SansSerif", Font.PLAIN, 12));
        plot.setNoDataMessage("No data available");
        plot.setCircular(false);
        plot.setLabelGap(0.02);
        return ch;
    }

    public void showChart(Object database) {
        this.database = database;
        dataset = createDataset();
        chart = createChart(dataset);
        ChartPanel cp = (ChartPanel) createChartPanel();
        if (chart != null) {
            container.add(cp, BorderLayout.CENTER);
            cp.setVisible(true);
            cp.updateUI();
            
        }
        updateUI();
    }

    protected JPanel createChartPanel() {
        return new ChartPanel(chart);
    }

    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setLayout(new BorderLayout());
        ByEventsEnergyChart c = new ByEventsEnergyChart();
        c.showChart(new Object());
        f.add(c);
//        f.pack();
        f.setVisible(true);
    }
}
